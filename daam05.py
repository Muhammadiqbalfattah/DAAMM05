# -*- coding: utf-8 -*-
"""DaaM05.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q5K0vy_OgzHR9IFqCH_zMvmGih66h5Ux
"""

#Latihan 1
#Hitung Inversi

def countInversion (arr):
  result=0
  for i in range(len(arr)):
    for j in range (i+1,len(arr)):
      if arr[i]> arr[j]:
        result+=1
  return result

arr = [10,20,30,42,13,5,60]

result= countInversion(arr)
print(result)
#JadiAdaDelapanStepYangDilakukanKomputer.

#Latihan 2
#Divide n Conquer

def countInversiondua(abc):
  icount=0
  if len(abc) <=1:
    return icount

  mid=len(abc)//2
  left=abc[:mid]
  right=abc[mid:]
  icount+=countInversiondua(left)
  icount+=countInversiondua(right)
  i=j=k=0

#Print(left)
#Print(right)
  while i<len(left) and j<len(right):
    if left[i]<right[j]:
      abc[k]= left[j]
      i+=1
    else:
      #print(left[i],right[j])
      abc[k]= right[j]
      j+=1
      icount+= (mid-i)
    k+=1
  while i<len(left):
    abc[k]=left[i]
    i+=1
    k+=1
  while j<len(right):
    abc[k]=right[j]
    j+=1
    k+=1
  return icount

abc=[20,22,22,11,24,53]

result=countInversiondua(abc)
print(result)

#Latihan 3
#Tanpa Divide dan Conquer
def maxSubSum(arr):
  max_so_far=0
  max_ending_here=0
  for i in range(len(arr)):
    max_ending_here+=arr[i]
    if max_ending_here>max_so_far:
      max_so_far=max_ending_here
    if max_ending_here<0:
        max_ending_here=0
  return max_so_far

arr=[-2,-5,6,-2,-3,1,5,-6]

result=maxSubSum(arr)
print(result)

#Latihan 4
#Menggunakan Divide and Conquer

def maxCrossingSum(arr,low,mid,high):
  result=0;leftSum=float('-infinity')
  for i in range (mid,low-1,-1):
    result+=arr[i]
    if result>leftSum:
      leftSum=result
  result=0; rightSum=float('-infinity')
  for i in range(mid+1,high+1):
    result+=arr[i]
    if result>rightSum:
        rightSum=result
  return leftSum+rightSum

def maxSum(arr,low,high):
  if low == high:
    return arr[low]
  mid=(low+high)//2
  return max(maxSum(arr,low,mid),maxSum(arr,mid+1,high),maxCrossingSum(arr,low,mid,high))

arr=[-2,-5,6,-2,-3,1,5,-6,8]
result = maxSum(arr,0,len(arr)-1)
print(result)

#Latihan 5
#Dengan divide dan conquer

def commonPrefix(str1,str2):
    n1=len(str1);n2=len(str2)
    i,j=0,0
    s=""
    while i<n1 and j<n2:
        if str1[i] == str2[j]:
          s+=str1[i]
          i+=1
          j+=1
        else:
          break
    return s

def longestCommongPrefix(arr,low,high):
      if low==high:
        return arr[low]
      mid=(low+high)//2
      result1=longestCommongPrefix(arr,low,mid)
      result2=longestCommongPrefix(arr,mid+1,high)
      result=commonPrefix(result1,result2)
      return result

arr = ['geeksforgeeks', 'geeks', 'geek', 'geezer']
result =longestCommongPrefix(arr,0,len(arr)-1)
print(result)

arr =["Bagus","Bagas","Baginda"]
result= longestCommongPrefix(arr,0,len(arr)-1)
print(result)

#Latihan 6
#Median dari 2 array dengan divide dan conquer

def medianOfArray(arr1,arr2,n):
    m1=-1
    m2=-1
    count = 0
    i=j=0
    while count<n+1:
      count+=1
      if i==n:
        m1=m2
        m2=arr2[0]
        break
      if j==n:
        m1=m2
        m2=arr1[0]
        break
      if arr1[i]<arr2[j]:
        m1=m2
        m2=arr1[i]
        i+=1,
      else:
        m1=m2
        m2=arr2[j]
        j+=1
    return(m1+m2)//2

arr1=[10,20,25,80,12]
arr2=[11,21,0,81,13]

print(medianOfArray(arr1,arr2,len(arr1)))

#Latihan 7 
#Median 2 array urut berbeda ukuran

#Deklarasi Variabel
def floorSorted(arr,low,high,x):
    if low>high:
      return -1

    if arr[low]>x:
      return-1

    if arr[high]<=x:
      return arr[high]

    #formula median(?)
    mid = (low+high)//2

    if arr[mid] ==x:
      return arr[mid]

    if mid>0 and x>=arr[mid-1] and arr[mid]>x:
        return arr[mid-1]

    if mid<high and x<arr[mid+1] and x>=arr[mid]:
        return arr[mid]

    if x>arr[mid]:
        return floorSorted(arr,mid+1,high,x)
    else:
        return floorSorted(arr,low,mid-1,x)

arr = [1,2,8,10,12,14,19,12]
x = 5

print(floorSorted(arr,0,len(arr)-1,x))

#Latihan 8
#Mencari nilai terdekat dengan metode divide dan conquer

def closestNumber(arr,low,high,x):
    if low>high:
      return -1
    if arr[high]<=x:
      return arr[high]
    if arr[low]>=x:
      return arr[low]

  #Formula mencari nilai 
    mid = (low+high)//2

    if arr[mid]==x:
      return arr[mid]
    abs_mid= abs(arr[mid]-x)

    if mid>0:
      abs_left=abs(arr[mid-1]-x)
      if abs_left<abs_mid:
        return closestNumber(arr,low,mid-1,x)
    
    if mid<high:
      abs_right=abs(arr[mid+1]-x)
      if abs_left<abs_mid:
        return closestNumber(arr,mid+1,high,x)
    
    return arr[mid]

arr =[2,5,6,7,8,10,22]
x = 9

print(closestNumber(arr,0,len(arr)-1,x))

#Latihan 9
#Mencari fixed point dengan metode divide dan conquer

def fixedPoint(arr,low,high):
    if low>high:
      return -1
    if arr[high]==high:
      return arr[high]
    if arr[low]==low:
      return arr[low]
    mid= (low+high)//2
    if arr[mid]==mid:
      return arr[mid]
    if mid>arr[mid]:
      return fixedPoint(arr,mid+1,high)
    else:
      return fixedPoint(arr,low,mid-1)

arr =[9,1,4,5,2]

print(fixedPoint(arr,0,len(arr)-1))

